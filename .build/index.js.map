{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["namespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n  const lettersRegexp = /^[A-Za-z]+$/;\n  const numberRegexp = /^[0-9]+$/;\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return lettersRegexp.test(s);\n    }\n  }\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return s.length === 5 && numberRegexp.test(s);\n    }\n  }\n}\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator } = {};\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    console.log(\n      `\"${s}\" - ${\n        validators[name].isAcceptable(s) ? \"matches\" : \"does not match\"\n      } ${name}`\n    );\n  }\n}\n"],
  "mappings": "AAAA,IAAU;AAAV,UAAU,aAAV;AAIE,QAAM,gBAAgB;AACtB,QAAM,eAAe;AACd,6BAAsD;AAAA,IAC3D,aAAa,GAAW;AACtB,aAAO,cAAc,KAAK;AAAA;AAAA;AAFvB,cAAM;AAKN,yBAAkD;AAAA,IACvD,aAAa,GAAW;AACtB,aAAO,EAAE,WAAW,KAAK,aAAa,KAAK;AAAA;AAAA;AAFxC,cAAM;AAAA,GAXL;AAkBV,IAAI,UAAU,CAAC,SAAS,SAAS;AAEjC,IAAI,aAA0D;AAC9D,WAAW,cAAc,IAAI,WAAW;AACxC,WAAW,kBAAkB,IAAI,WAAW;AAE5C,SAAS,KAAK,SAAS;AACrB,WAAS,QAAQ,YAAY;AAC3B,YAAQ,IACN,IAAI,QACF,WAAW,MAAM,aAAa,KAAK,YAAY,oBAC7C;AAAA;AAAA;",
  "names": []
}
